on:
  repository_dispatch:
    types: [ copy-workflow ]

jobs:
  copy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ github.event.client_payload.targets }}
    env:
      TARGET_REPO_DIR: "target-repo"
      TEMPLATE_REPO_DIR: "template-repo"
      TEMPLATE_DIR: "templates"
      NEEDS_UPDATE: 0
      INITIAL_TEST_DEPLOYMENT: 0
      GITHUB_USER: ""
      GITHUB_EMAIL: ""
    name: Update ${{ matrix.file }} on ${{ matrix.cfg.target }}
    steps:
    - name: Event JSON
      run: cat "$GITHUB_EVENT_PATH" | jq -M .
    - name: Checkout ${{ matrix.cfg.target }}
      uses: actions/checkout@v2
      with:
        path: ${{ env.TARGET_REPO_DIR }}
        repository: ${{ matrix.cfg.target }}
        token: ${{ secrets.IPLDBOT_GITHUB_TOKEN }}
        persist-credentials: true
    - name: Checkout template repository
      uses: actions/checkout@v2
      with:
        path: ${{ env.TEMPLATE_REPO_DIR }}
    - name: config
      run: |
        org=$(echo "${{ matrix.cfg.target }}" | cut -f1 -d"/")
        user=$(jq -r --arg v "$org" '.[$v].user' $TEMPLATE_REPO_DIR/.github/workflows/users.json)
        echo $user
        if [[ "$user" == "null" ]]; then
          echo "No configuration found for GitHub org $org."
          exit 1
        fi
        echo "Using GitHub user $user for $org."
        echo "GITHUB_USER=$user" >> $GITHUB_ENV
        echo "GITHUB_EMAIL=$user@users.noreply.github.com" >> $GITHUB_ENV
    - name: git config
      run: |
        cd $TARGET_REPO_DIR
        git config user.name ${{ env.GITHUB_USER }}
        git config user.email ${{ env.GITHUB_EMAIL }}
    - name: is initial test workflow deployment
      run: |
        cd $TARGET_REPO_DIR
        if [[ ! -f .github/workflows/go-test.yml ]]; then
          echo "INITIAL_TEST_DEPLOYMENT=1" >> $GITHUB_ENV
        fi
    - name: remove Travis on initial deployment
      if: ${{ env.INITIAL_TEST_DEPLOYMENT == 1 }}
      run: |
        cd $TARGET_REPO_DIR
        if [[ -f .travis.yml ]]; then
          git rm .travis.yml
          git commit -m "disable Travis"
        fi
    - name: remove CircleCI on initial deployment
      if: ${{ env.INITIAL_TEST_DEPLOYMENT == 1 }}
      run: |
        cd $TARGET_REPO_DIR
        if [[ -d .circleci ]]; then
          git rm -r .circleci
          git commit -m "disable CircleCI"
        fi
    - name: run go mod tidy
      run: |
        cd $TARGET_REPO_DIR
        go mod edit -go 1.16
        go mod tidy
        if ! git diff --quiet; then
          git add go.mod go.sum
          git commit -m "run go mod tidy"
        fi
    - name: gofmt
      run: |
        cd $TARGET_REPO_DIR
        gofmt -s -w .
        if ! git diff --quiet; then
          git diff
          git status
          git submodule status
          git add main.go
          git commit -m "run gofmt -s"
        fi
    - name: Create commits
      run: |
        for f in $(jq -r ".[]" <<< '${{ toJson(github.event.client_payload.files) }}'); do 
          echo -e "\nProcessing $f."
          # add DO NOT EDIT header
          tmp=$(mktemp)
          cat $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/header.yml $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/$f > $tmp
          mv $tmp $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/$f
          # create commit, if necessary
          commit_msg=""
          if [[ ! -f "$TARGET_REPO_DIR/$f" ]]; then
            echo "First deployment.\n"
            commit_msg="add $f"
          else
            status=$(cmp --silent $TARGET_REPO_DIR/$f $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/$f; echo $?)
            if [[ $status -ne 0 ]]; then
              echo "Update needed."
              commit_msg="update $f"
            else
              echo "File indentical. Skipping."
              continue
            fi
          fi
          dir="$TARGET_REPO_DIR/"$(dirname $f)
          mkdir -p $dir
          cp $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/$f $dir
          pushd $TARGET_REPO_DIR > /dev/null
          git add $f
          git commit -m "$commit_msg"
          popd > /dev/null
        done
        rm -rf $TEMPLATE_REPO_DIR
    - name: Check if we need to create a PR
      run: |
        cd $TARGET_REPO_DIR
        echo "NEEDS_UPDATE=$(git rev-list HEAD...origin/$(git rev-parse --abbrev-ref HEAD) --ignore-submodules --count)" >> $GITHUB_ENV
    - name: Create Pull Request
      if: ${{ env.NEEDS_UPDATE }}
      uses: peter-evans/create-pull-request@052fc72b4198ba9fbc81b818c6e1859f747d49a8 #v3.8.2
      with:
        path: ${{ env.TARGET_REPO_DIR }}
        title: "sync: update CI config files"
        body: |
          Syncing to commit ${{ github.event.client_payload.github_event.head_commit.url }}.

          ---
          You can trigger a rebase by commenting `@${{ env.GITHUB_USER }} rebase`.
        token: ${{ secrets.IPLDBOT_GITHUB_TOKEN }}
        committer: ${{ env.GITHUB_USER }} <${{ env.GITHUB_EMAIL }}>
        author: ${{ env.GITHUB_USER }} <${{ env.GITHUB_EMAIL }}>
        branch: sync
        delete-branch: true
